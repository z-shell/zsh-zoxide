# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et

builtin emulate -L zsh ${=${options[xtrace]:#off}:+-o xtrace}
builtin setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd

local -a input=( $@ ) chpwd_functions; integer count ret=0
local md5_hash zoxide_cache zoxide_cache_dir __zoxide_z_prefix
local counter_file max=${ZEC_MAX:-1000}

md5_hash="no_hash"
zoxide_cache_dir="${Plugins[ZSH_ZOXIDE]}/._zoxide"

[[ -d $zoxide_cache_dir ]] || command mkdir -p $zoxide_cache_dir &> /dev/null

if (( $+commands[md5] )); then
  md5_hash=$(md5 <<< $input)
elif (( $+commands[md5sum] )); then
  md5_hash=$(md5sum <<< $input | awk '{ print $1 }')
else
  print "command: md5 program not found"; return 1
fi

zoxide_cache="${zoxide_cache_dir}/${md5_hash}.zsh"
counter_file="${zoxide_cache_dir}/${md5_hash}.txt"

if (( ZEC_DISABLED )); then
  (( ZEC_DEBUG )) && builtin print -Pr "@zsh-eval-cache: disabled"
  eval $( $input ); ret=$?
elif [[ -s $zoxide_cache ]]; then
  [[ -f $counter_file ]] || builtin print 1 > $counter_file 2> /dev/null

  count=$(<$counter_file) && (( count++ ))
  builtin print $count > $counter_file 2> /dev/null

  (( ZEC_DEBUG )) && builtin print -Pr "@zsh-eval-cache: hit $count"

  builtin source $zoxide_cache; ret=$?
else
  [[ -f $counter_file ]] || builtin print 1 > $counter_file 2> /dev/null

  (( ZEC_DEBUG )) && builtin print -Pr "@zsh-eval-cache: miss"

  ($input > $zoxide_cache && zcompile -U $zoxide_cache && builtin source $zoxide_cache); ret=$?
fi

(( count > max )) && command rm -rf ${zoxide_cache_dir} &> /dev/null

return $ret
